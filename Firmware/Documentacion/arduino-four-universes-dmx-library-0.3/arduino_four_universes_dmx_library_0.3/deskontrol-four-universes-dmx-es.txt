Instrucciones para instalar la libreria - version 0.3:

Copiar la carpeta de la libreria deskontrol "Dmx" a la carpeta arduino-XX.XX/libraries/

Instrucciones para utilizar la libreria:

Existen cuatro objetos ya creados llamados "ArduinoDmx0", "ArduinoDmx1", "ArduinoDmx2", "ArduinoDmx3", cada uno de estos objetos utiliza una USART del Arduino mega, con Arduino nano solo podremos utilizar "ArduinoDmx0" por que solo existe una USART.

A la hora de compilar tus programas, para economizar recursos del Arduino conviene comentar en el archivo "lib_dmx.h" las lineas con  "#define USE_UARTN" de las USARTs que no vayamos a utilizar. (solo en Arduino Mega), asi evitas que se compile codigo innecesario.

El uso es muy facil, las funciones que hay que utilizar son:

ArduinoDmxN.set_control_pin(PIN_NUMBER);  // -1 si no se usa pin de control

LLamando a esta funcion asignamos el numero del pin que se utilizara para controlar en el driver MAX485, si funciona como universo de entrada o de salida. (pin del arduino que conecta con los pines 2 y 3 del MAX485), puede ser cualquier pin de salida digital del Arduino.    

ArduinoDmxN.set_rx_address(DMX_RX_ADDRESS);  

LLamando a esta funcion asignamos la direccion de ENTRADA DMX para este universo, puede ser cualquier valor entre 1 y 510 (2046)*.

ArduinoDmxN.set_tx_address(DMX_TX_ADDRESS);

LLamando a esta funcion asignamos la direccion de SALIDA DMX para este universo, puede ser cualquier valor entre 1 y 510 (2046)*.
 
ArduinoDmxN.set_rx_channels(NUMBER_OF_CHANNELS);

LLamando a esta funcion asignamos el numero de canales de ENTRADA DMX para este universo, puede ser cualquier valor entre 2 y and 512 (2048)*.

ArduinoDmxN.set_tx_channels(NUMBER_OF_CHANNELS);

LLamando a esta funcion asignamos el numero de canales de SALIDA DMX para este universo, puede ser cualquier valor entre 2 y and 512 (2048)*.

Si quieres utilizar el modo sincrono:

ArduinoDmxN.attachTXInterrupt(my_TX_ISR_name);

LLamando a esta funcion asignamos el nombre de la funcion de callback que se activa cada vez que se termina de enviar una trama DMX en un universo. (evita perdida de tiempo en el bucle principal del programa)

ArduinoDmxN.attachRXInterrupt(my_RX_ISR_name);

LLamando a esta funcion asignamos el nombre de la funcion de callback que se activa cada vez que se termina de recibir una trama DMX en un universo. (evita perdida de tiempo en el bucle principal del programa)

Para empezar a transmitir o recibir DMX en un universo (por el momento no es posible de forma simultanea en el mismo universo), utilizaremos una de las siguientes funciones:

ArduinoDmxN.init_rx(DMX_MODE);   // *** nuevo parametro DMX_MODE ***

LLamando a esta funcion (una vez llamadas las funciones anteriores) iniciamos este universo para RECIBIR DMX.

ArduinoDmxN.init_tx(DMX_MODE);   // *** nuevo parametro DMX_MODE***

LLamando a esta funcion (una vez llamadas las funciones anteriores) iniciamos este universo para TRANSMITIR DMX.

Para escribir en la salida DMX:   ArduinoDmxN.TxBuffer[CHANNEL - 1] = Data;

Para leer la entrada DMX:         Data = ArduinoDmxN.RxBuffer[CHANNEL - 1];

* Esta libreria no utiliza ningun temporizador del arduino, quedando libres para otros usos.

De esta forma podemos utilizar hasta cuatro universos simultaneamente, funcionando cada uno como entrada o como salida DMX. 

En los ejemplos de la libreria tenemos como:
- Recibir DMX en un solo universo. 
- Mezclar 2 entradas DMX (2 universos) en uno, con parcheado de canales. 200+200 canales de entrada, 400 de salida.
- Mezclar 2 entradas DMX (2 universos) en uno, con prioridad del valor mas alto (HTP)
- Utilizar interrupciones para enviar o recibir de manera sincrona.
- Utilizar los modos DMX rapidos no estandard.

* 2048 canales con DMX1000K - 512 con DMX512


Cualquier sugerencia o mejora es bienvenida.
 

7-Jul-2012  - Toni Merino  - www.deskontrol.net

